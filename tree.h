#ifndef TREE_H_
#define TREE_H_

#include <stdio.h>

struct Node{
	int data;
	struct Node* left;
	struct Node* right;
	int level;
};

// Binary Tree functions
void insert	(struct Node** root, int data);
void find	(struct Node*  root, int data);

/* Orders of printing */

// Recursive priting
void print_preorder (struct Node* root);
void print_inorder  (struct Node* root);
void print_postorder(struct Node* root);

// Iterative printing
void iter_print_preorder  (struct Node* root);
void iter_print_inorder   (struct Node* root);
void iter_print_postorder (struct Node* root);
void iter_print_levelorder(struct Node* root);

// Visual display of a Binary Tree
void visual_print(struct Node* head);

// Util functions
int int_pow(int base, int exp);
int calculate_spaces(int levels, int head_level);
int check_power_of_two(int number);
int which_power_of_two(int two_pow);

/*
	My example:
_______________________
___________8___________ 
_____5___________9_____
__4_____7_____X_____X__
3___X_X___X_X___X_X___X

0 = 0
1 = 1
2 = 3
3 = 7
4 = 15
*/

/*

_____
__1__                                               HEIGHT: 2
2___3

___________
_____1_____
__2_____3__                                         HEIGHT: 3
4___5______

_______________________
___________1___________
_____2___________3_____                             HEIGHT: 4
__4_____5_____6_____7__
8___9_X___X_X___X_X___X

_______________________X_______________________
___________X_______________________X___________
_____X___________X___________X___________X_____     HEIGHT: 5
__X_____X_____X_____X_____X_____X_____X_____X__
X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X

_______________________________________________X_______________________________________________
_______________________X_______________________________________________X_______________________
___________X_______________________X_______________________X_______________________X___________       HEIGHT: 6
_____X___________X___________X___________X___________X___________X___________X___________X_____
__X_____X_____X_____X_____X_____X_____X_____X_____X_____X_____X_____X_____X_____X_____X_____X__
X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X

Formula:
2^(height - level) - 2^((level + 2 > height) ? 0 : (height - level - 2))


// ===========================================================================================================

___________
_____8_____
__5_____9__
____7______

8, 5, 9, null, 7 null, null

___________
_____1_____
__2_____3__
4___5_6___7
0) 8 - 2 = 6
1) 4 - 1 = 3
2) 2 - 1 = 1

// ===========================================================================================================

											 |SIX|
_______________________________________________X_______________________________________________
_______________________X_______________________________________________X_______________________
___________X_______________________X_______________________X_______________________X___________
_____X___________X___________X___________X___________X___________X___________X___________X_____
__X_____X_____X_____X_____X_____X_____X_____X_____X_____X_____X_____X_____X_____X_____X_____X__
X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X

// 1 3 6 12 24 48

Tree of height: |6| - SIX
0) 47 // 47 x 47
1) 23 // 23 x 47 x 23
2) 11 // 11 x 23 x 23 x 11
3)  5 //  5 x 11 x 11 x 11 x 11 x 11 x 11 x 11 x 5
4)  2 //  2 x 5  x 5  x 5  x 5  x 5  x 5  x 5  x 5  x 5  x 5  x 5  x 5  x 5  x 5  x 5  x 2
5)  0 //  0 x 3  x 1  x 3  x 1  x 3  x 1  x 3  x 1  x 3  x 1  x 3  x 1  x 3  x 1  x 3 x 1  x 3  x 1  x 3  x 1  x 3  x 1  x 3  x 1  x 3  x 1  x 3  x 1  x 3 x 1 x 3 x 0

// ===========================================================================================================



// ===========================================================================================================

					 |FIVE|
_______________________X_______________________
___________X_______________________X___________
_____X___________X___________X___________X_____
__X_____X_____X_____X_____X_____X_____X_____X__
X___X_X___X_X___X_X___X_X___X_X___X_X___X_X___X

Tree of height: |5| - FIVE
0) // 23 x 23
1) // 11 x 23 x 11
2) //  5 x 11 x 11 x 11 x 5
3) //  2 x 5  x 5  x 5  x 5 x 5  x 5 x 5  x 5 x 2
4) //  0 x 3 x 1  x 3  x 1  x 3  x 1  x 3  x 1  x 3  x 1  x 3  x 1  x 3  x 1  x 3 x 0


Tree of height: 5
0) 2^5 - 2^3 = 24
1) 2^4 - 2^2 = 12
2) 2^3 - 2^1 = 6
3) 2^2 - 2^0 = 3
4) 2^1 - 2^0 = 1

Formula: 
2^(tree_height - level) - 2^((level + 2 > tree_height) ? 0 : (lvls - level - 2)) 


0) 2^(5 - 0) - 2^(5 - 0 - 2) = 32 - 8 = |24| // Second option in parenthesis
1) 2^(5 - 1) - 2^(5 - 1 - 2) = 16 - 4 = |12| // Second option in parenthesis
2) 2^(5 - 2) - 2^(5 - 2 - 2) =  8 - 2 = | 6| // Second option in parenthesis
3) 2^(5 - 3) - 2^(5 - 3 - 2) =  4 - 0 = | 4| // Second option in parenthesis
4) 2^(5 - 4) - 0             =  2 - 0 = | 2| // First  option in parenthesis
5) 2^(5 - 5) - 0             =  1 - 0 = | 1| // First  option in parenthesis

// ===========================================================================================================

*/


#endif //TREE_H
